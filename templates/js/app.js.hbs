import express from 'express';
import path from 'path';
// import favicon from 'serve-favicon';
import logger from 'morgan';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
{{#if connectflash}}
import flash from 'connect-flash';
{{/if}}
{{#if passport}}
import passport from 'passport';
import { Strategy } from 'passport-local';
{{/if}}
{{#each modulars}}
import {{key}} from '{{value}}';
{{/each}}

import routings from './routes';

const app = express();
{{#if helmet}}
// use helmet
app.use(helmet());
{{/if}}

// view engine setup
{{#if view.render}}
app.engine('{{view.engine}}', {{view.render}});
{{/if}}
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', '{{view.engine}}');

{{#if registerpartials}}
hbs.registerPartials(`${__dirname}/views/partials`);
{{/if}}

// uncomment after placing your favicon in /public
// app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
{{#each uses}}
app.use({{this}});
{{/each}}
app.use(express.static(path.join(__dirname, 'public')));

{{#if cookiesession}}
// setting up sessions
const idleTimeoutSeconds = 1800;
app.use(require('cookie-session')({
    name: '{{data.projectname}}',
    maxAge: idleTimeoutSeconds * 1000,
    keys: ['{{data.cookie.key1}}', '{{data.cookie.key2}}']
}));
{{/if}}

{{#if passport}}
// initializing passport
app.use(passport.initialize());
app.use(passport.session());
{{/if}}

{{#if connectflash}}
app.use(flash());
app.use((req, res, next) => {
    res.locals._error = req.flash('error');
    res.locals._info = req.flash('info');
    res.locals._success = req.flash('success');
    next();
});
{{/if}}

// import the routing 
routings(app);


// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use((err, req, res, next)=> {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
